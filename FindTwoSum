using System;
using System.Collections.Generic;

public class TwoSum
{
	bool flag=false;
    public static Tuple<int, int> FindTwoSum(IList<int> list, int sum)
    {
		int a = 0;
		int size = list.Count;
		int size2=size-1;
		var indices= Tuple.Create(0,0);
		var list2 = new List<int>() { 1, 3, 5, 7, 9};
		var list3 = new List<string>();
		for (int i=0;i<size;i++)
		{
			if (list[i] != size2)
			{	
				int b=0;
				for (int j=0;j<size;j++)
				{  
					if (list2[j] != size2)
					{ 
						int c =0;
						c = list[i]+list2[j];
						string d =a+", "+b;
						if (list[i] ==size2 && list2[j]==size2)
						{
							Console.WriteLine(list[i]+" "+list2[j]);
						}
						if (c==12)
						{
							//list3.Add(d + "("+list[i] + " + " +list2[j] + " = " + c+")");
							//Console.WriteLine(d + "("+list[i] + " + " +list2[j] + " = " + c+")");
						    indices = Tuple.Create(a,b);
							return indices;
						}
					}
				  b++;
				}
				a++;
				//Console.WriteLine("A= "+a+"  B = "+b);
				/*if (a==size && b==size)
				{
					Console.WriteLine("Hi");
					return null;
				}*/
			} 
		}
		return null;
    }
	
    public static void Main(string[] args)
    {
		int sum = 12;
        Tuple<int, int> indices = FindTwoSum(new List<int>() { 1, 3, 5, 7, 9}, 12);
        if (indices != null){
			Console.WriteLine("("+indices.Item1 + ", " + indices.Item2+")");
		}
		else
		{Console.WriteLine("Could not find two distinct elements that add upto :" + sum);}
    }
}

/*
Write a function that, given a list and a target sum, returns zero-based indices of any two distinct elements whose sum is equal to the target sum. If there are no such elements, the function should return null.
For example, FindTwoSum(new List<int>() { 1, 3, 5, 7, 9 }, 12) should return any of the following tuples of indices:
    1, 4 (3 + 9 = 12)
    2, 3 (5 + 7 = 12)
    3, 2 (7 + 5 = 12)
    4, 1 (9 + 3 = 12)
*/
